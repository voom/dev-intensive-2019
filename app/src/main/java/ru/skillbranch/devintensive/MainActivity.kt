package ru.skillbranch.devintensive

import android.os.Bundle
import android.util.Log
import androidx.appcompat.app.AppCompatActivity

class MainActivity : AppCompatActivity() {

    /**
     * вызывается при первом создании или перезапуске Activity
     * задаётся внешний вид Activity (UI) через метод setContentView().
     * инициализируются представления и модели
     * представления связываются с необходимыми данными и ресурсами
     *
     * Этот метод также предоставляет Bundle, содержащий ранее сохранённое состояние Actiivity, если оно было.
     *
     * Всегда сопровождается вызовом onStart()
     */
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)
        Log.d("DI_MainActivity","onCreate")
    }

    /**
     * вызывается если Activity возвращается в приоритетный режим после вызова onStop(),
     * т.е. вызывается после того, как Activity была остановлена и снова была запущена пользователем.
     *
     * Всегда сопровождается вызовом метода onStart().
     *
     * используется для специальных действий, которые должны выполняться только при повторном запуске Activity
     */
    override fun onRestart() {
        super.onRestart()
        Log.d("DI_MainActivity","onRestart")
    }

    /**
     * При выхове onStart() UI еще не виден пользователю, но вскоре будет виден,
     * вызывается непосредственно перед тем, как Activity становится видимой пользователю.
     * 
     * чтение из базы данных
     * запуск сложной анимации
     * запуск потоков, отслеживания показаний датчиков, запросов к GPS, сервисов или других процессов,
     * которые нужны исключительно для обновления пользовательского интерфейса
     *
     * Затем следует onResume(), если Activity выходит на передний план
     */
    override fun onStart() {
        super.onStart()
        Log.d("DI_MainActivity","onStart")
    }

    /**
     * вызывается, когда Activity начнет взаимодействовать с пользователем.
     *
     * запуск воспроизведения анимации, аудио и видео
     * регистрации любых BroadcastReceiver или других процессов, которые вы освободили/приостановили в onPause()
     * выполнение любых другие инициализации, которые должны происходить, когда Activity вновь активна (камера).
     *
     * Тут должен быть максимально лёгкий и быстрый код, чтобы приложение оставалось отзывчивым
     */
    override fun onResume() {
        super.onResume()
        Log.d("DI_MainActivity","onResume")
    }

    /**
     * вызывается после сворачивания текущей активности или перехода к новому.
     * От onPause() можно перейти к вызову либо onResume(), либо onStop().
     *
     * остановка анимации, аудио и видео
     * сохранение состояния пользовательского ввода (легкие процессы)
     * сохранение в DB если данные должны быть доступны в новой Activity
     * остановка сервисов, подписок, BroadcastReceiver
     *
     * Тут должен быть максимально лёгкий и быстрый код, чтобы приложение оставалось отзывчивым
     */
    override fun onPause() {
        super.onPause()
        Log.d("DI_MainActivity","onPause")
    }

    /**
     * вызывается, когда Activity становится невидимым для пользователя.
     * Это может произойти при её уничтожении, или если была запущена другая Activity (существующая или новая),
     * перекрывшая окно текущей Activity.
     *
     * запись в базу данных
     * приостановка сложной анимации
     * приостановка потоков, отслеживания показаний датчиков, запросов к GPS, таймеров,
     * сервисов или других процессов, которые нужны исключительно для обновления пользовательского интерфейса
     *
     * Не вызывается при выызове finish() у Activity
     */
    override fun onStop() {
        super.onStop()
        Log.d("DI_MainActivity","onStop")
    }

    /**
     * вызывается по окончании работы Activity (пользователь закрывает приложение через клавишу back,
     * или удаляет из списка активных приложений), при вызове метода finish() или в случае, когда система уничтожает
     * этот экземпляр активности для освобождения ресурсов.
     *
     * высвобождение ресурсов
     * дополнительная перестраховка если ресурсы не были выгружены или процессы не были остановлены ранее
     */
    override fun onDestroy() {
        super.onDestroy()
        Log.d("DI_MainActivity","onDestroy")
    }
}
